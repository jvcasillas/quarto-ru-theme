---
title: "Quarto Rutgers theme"
subtitle: "Port of the ru_xaringan theme using quarto markdown"
author: "Joseph V. Casillas"
institute: "Rutgers University"
date: "Last update: `r Sys.Date()`"
format: rutgers-revealjs
engine: knitr
execute: 
  out.width: "100%"
  fig.asp: 0.5625
  dpi: 300
---

# The basics {.transition}

Check me out

## Standard markdown stuff

-   Similar to `xaringan`, **revealjs** uses \# for headers
-   One difference is that they automatically generate a new slide
    -   Two (##) for a level two header at the top of a slide
    -   One (#) is centered vertically (good for a section divider)
-   All other basic markdown syntax works the same:

### h3 level

#### h4 level

## Incremental slides

To make an ordered or unordered list incremental you have to use css

. . .

</br>

::: columns
::: {.column width="50%"}
```         
::: {.incremental}
- First this one
- Then this one
:::
```
:::

::: {.column width="50%"}
::: incremental
-   First this one
-   Then this one
:::
:::
:::

. . .

::: columns
::: {.column width="50%"}
```         
::: {.incremental}
1. First this one
2. Then this one
:::
```
:::

::: {.column width="50%"}
::: incremental
1.  First this one
2.  Then this one
:::
:::
:::

## Multiple columns

You can make multiple columns of any width using css as well

. . .

```
:::: {.columns}

::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::

::::
```

::: columns
::: {.column width="50%"}
Left column
:::

::: {.column width="50%"}
Right column
:::
:::

# Some new stuff {.transition}

## Long slides? {.smaller}

You can use css to make text smaller with `{.smaller}`

. . .

```
## Slide Title {.smaller}
```

. . .

-   this
-   is
-   ideal
-   for
-   really
-   long
-   slides
-   but
-   it's
-   usually
-   better to avoid that

## Long slides? (again) {.scrollable}

Another option is to make the individual slide scrollable using `{.scrollable}`

. . .

-   this
-   is
-   ideal
-   for
-   really
-   long
-   slides
-   but
-   it's
-   usually
-   better
-   to
-   avoid
-   that

## Don't forget your speaker notes

You can get your speaker notes all set up using

```         
::: {.notes}
Speaker notes go here.
:::
```

Click "s" to see some notes

::: notes
These are some notes.
:::

## Asides

You can include asides, but they are kind of weird.

```         
::: aside
This is an aside
:::
```

::: aside
This is an aside
:::

## Footnotes

I think footnotes are probably more useful [^1]

[^1]: But maybe not always

. . .

You can make them endnotes (ew) like this:

```         
---
format:
  revealjs:
    reference-location: document
---
```

## Custom footers

You can add a custom footer to any slide using

```         
::: footer
This is my footer
:::
```

::: footer
This is my footer
:::

## Export to pdf

You can use `pagedown::chrome_print("path-to-file.html")` to export the slides to pdf

Another option is to type 'e'

## iframes

You can easily embed iframes (see next slide)

```{r}
#| echo: true
#| eval: false
## iframes {background-iframe="https://www.jvcasillas.com"}
```

-   the website is embedded in the slide
-   it defaults to full screen
-   set `background-interactive` to true if you need to actually use the page

##  {background-iframe="https://www.jvcasillas.com"}

## preview links

You can see the content of a link without opening a separate page by setting `preview-links: true`

[An example](https://www.jvcasillas.com)

[Another example](https://www.quarto.org)

## Sizing things up

```         
::: {.r-fit-text}
Big Text
:::
```

::: r-fit-text
Big Text
:::

## Stretching imgs

```         
![](image.png){.r-stretch}
```

![](https://a.espncdn.com/combiner/i?img=/i/teamlogos/ncaa/500/164.png){.r-stretch}

# Animations {.transition}

## Animations explained

```         
## {auto-animate=true}

::: {style="margin-top: 100px;"}
Animating content
:::

## {auto-animate=true}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Animating content
:::
```

##  {auto-animate="true"}

::: {style="margin-top: 100px;"}
Look at me
:::

##  {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 4em; color: #cc0033;"}
Look at you
:::

##  {auto-animate="true"}

::: {style="margin-top: 600px; margin-left: 400px; font-size: 2em; color: black;"}
Look at this
:::

##  {auto-animate="true"}

::: {style="margin-top: 100px; margin-left: 100px; font-size: 4em; color: #cc0033;"}
Look at this
:::

## You can animate code chunks too

````         
## {auto-animate="true"}

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
})
```

## {auto-animate=true}

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
  barplot(WorldPhones[,input$region]*1000, 
          main=input$region,
          ylab="Number of Telephones",
          xlab="Year")
})
```
````

##  {auto-animate="true"}

``` r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
})
```

##  {auto-animate="true"}

``` r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
  barplot(WorldPhones[,input$region]*1000, 
          main=input$region,
          ylab="Number of Telephones",
          xlab="Year")
})
```

##  {auto-animate="true"}

cool

##  {auto-animate="true"}

is

cool

##  {auto-animate="true"}

animation

is

cool

##  {auto-animate="true" auto-animate-easing="ease-in-out"}

::: r-hstack
::: {data-id="box1" auto-animate-delay="0" style="background: #2780e3; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box2" auto-animate-delay="0.1" style="background: #3fb618; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box3" auto-animate-delay="0.2" style="background: #e83e8c; width: 200px; height: 150px; margin: 10px;"}
:::
:::

##  {auto-animate="true" auto-animate-easing="ease-in-out"}

::: r-stack
::: {data-id="box1" style="background: #2780e3; width: 350px; height: 350px; border-radius: 200px;"}
:::

::: {data-id="box2" style="background: #3fb618; width: 250px; height: 250px; border-radius: 200px;"}
:::

::: {data-id="box3" style="background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;"}
:::
:::

# Fragments {.transition}

------------------------------------------------------------------------

::: fragment
Fade in
:::

::: {.fragment .fade-out}
Fade out
:::

::: {.fragment .highlight-red}
Highlight red
:::

::: {.fragment .fade-in-then-out}
Fade in, then out
:::

::: {.fragment .fade-up}
Slide up while fading in
:::

# Code stuff {.transition}

## Standard slide with R code {.smaller}

-   You can highlight code using `code-line-numbers` in the knitr chunk options
-   If you include pipes, e.g., `code-line-numbers: "|5|"` they will be highlighted incrementally (nice!)
-   Using `output-location:` (fragment, slide, column, column-fragment) controls when and where the output of the code is displayed

```{r}
#| label: fig-code-ex
#| fig.cap: Example caption.
#| echo: true
#| code-line-numbers: "|1|2|3|4|5|6|"
#| output-location: slide

library("tidyverse")
ggplot(cars) + 
  aes(x = dist, y = speed) + 
  geom_point() + 
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) + 
  theme_bw(base_family = "Palatino", base_size = 20) + 
  theme(
    panel.grid.major = element_line(colour = 'grey90', size = 0.15),
    panel.grid.minor = element_line(colour = 'grey90', size = 0.15)
  )
```

## Tabsets

You can use tabsets pretty easily

```         
::: {.panel-tabset}

### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`

:::
```

(example on next slide)

------------------------------------------------------------------------

::: panel-tabset
### Code

```{r}
#| label: build-fig-tabset
#| echo: true
plot_tabs <- mtcars |>
  ggplot() + 
  aes(x = drat, y = mpg) + 
  geom_point() + 
  geom_smooth(method = lm, formula = "y ~ x") + 
  theme_bw(base_family = "Palatino", base_size = 20) + 
  theme(
    panel.grid.major = element_line(colour = 'grey90', size = 0.15),
    panel.grid.minor = element_line(colour = 'grey90', size = 0.15)
  )
```

### Output

```{r}
#| label: fig-tabset
#| fig.cap: Tabset plot
plot_tabs
```
:::

# Linguistics stuff {.transition}

## IPA symbols work in unicode

-   /ʃæ.'riŋ.ɡæn/

-   /θðszʃʒʂʐçʝʎʟɘɵəɜ/

| Word        | Phonology | Phonetics              |
|:------------|-----------|------------------------|
| casa        | /ˈka.sa/  | \[ˈka.sa\]             |
| taco (Sp.)  | /ˈta.ko/  | \[ˈta.ko\]             |
| taco (Eng.) | /ˈta.ko/  | \[ˈt<sup>h</sup>a.ko\] |

# Finishing up {.transition}

## This is the final slide {.final}

![](https://a.espncdn.com/combiner/i?img=/i/teamlogos/ncaa/500/164.png){.absolute top="0" right="0" width="55" height="55"}

</br>

### you can add your email, twitter, github, etc. info here

Here is an example:

```{r}
#| label: pi-func
p_i <- function(link, icn) {
  out <- glue::glue("<a href='{link}'>{{{{< {icn} >}}}}</a>")
  return(out)
}

tibble::tibble(
  ` ` = c(
    p_i("mailto:joseph.casillas@rutgers.edu", "fa solid envelope"), 
    p_i("www.jvcasillas.com/quarto-rutgers-theme/", "fa solid link"),
    p_i("https://twitter.com/jvcasill", "fa brands twitter"), 
    p_i("https://github.com/jvcasillas", "fa brands github")
  ),
  `  ` = c(
    "joseph.casillas@rutgers.edu", 
    "jvcasillas.com/quarto-rutgers-theme", 
    "@jvcasill", 
    "@jvcasillas"
    )) |>
  knitr::kable(align = c("r", "l"))
```

